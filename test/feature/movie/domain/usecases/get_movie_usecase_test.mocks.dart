// Mocks generated by Mockito 5.3.2 from annotations
// in movie_clean_arch/test/feature/movie/domain/usecases/get_movie_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:movie_clean_arch/feature/movie/domain/entities/movie_details_entity.dart'
    as _i2;
import 'package:movie_clean_arch/feature/movie/domain/repositories/get_movie_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovieDetailsEntity_0 extends _i1.SmartFake
    implements _i2.MovieDetailsEntity {
  _FakeMovieDetailsEntity_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieDetailsEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDetailsEntity extends _i1.Mock
    implements _i2.MovieDetailsEntity {
  MockMovieDetailsEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get backdropPath => (super.noSuchMethod(
        Invocation.getter(#backdropPath),
        returnValue: '',
      ) as String);
  @override
  set backdropPath(String? _backdropPath) => super.noSuchMethod(
        Invocation.setter(
          #backdropPath,
          _backdropPath,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: 0,
      ) as int);
  @override
  set id(int? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );
  @override
  double get popularity => (super.noSuchMethod(
        Invocation.getter(#popularity),
        returnValue: 0.0,
      ) as double);
  @override
  set popularity(double? _popularity) => super.noSuchMethod(
        Invocation.setter(
          #popularity,
          _popularity,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get posterPath => (super.noSuchMethod(
        Invocation.getter(#posterPath),
        returnValue: '',
      ) as String);
  @override
  set posterPath(String? _posterPath) => super.noSuchMethod(
        Invocation.setter(
          #posterPath,
          _posterPath,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get releaseDate => (super.noSuchMethod(
        Invocation.getter(#releaseDate),
        returnValue: '',
      ) as String);
  @override
  set releaseDate(String? _releaseDate) => super.noSuchMethod(
        Invocation.setter(
          #releaseDate,
          _releaseDate,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get title => (super.noSuchMethod(
        Invocation.getter(#title),
        returnValue: '',
      ) as String);
  @override
  set title(String? _title) => super.noSuchMethod(
        Invocation.setter(
          #title,
          _title,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get voteCount => (super.noSuchMethod(
        Invocation.getter(#voteCount),
        returnValue: 0,
      ) as int);
  @override
  set voteCount(int? _voteCount) => super.noSuchMethod(
        Invocation.setter(
          #voteCount,
          _voteCount,
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [GetMovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMovieRepository extends _i1.Mock
    implements _i3.GetMovieRepository {
  MockGetMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.MovieDetailsEntity> call(String? id) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [id],
        ),
        returnValue:
            _i4.Future<_i2.MovieDetailsEntity>.value(_FakeMovieDetailsEntity_0(
          this,
          Invocation.method(
            #call,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.MovieDetailsEntity>);
}
